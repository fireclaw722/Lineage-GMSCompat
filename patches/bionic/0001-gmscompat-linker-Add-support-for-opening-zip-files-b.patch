From 69e1f33a34a3b423adf1e2b9cafba35fe9f4dac0 Mon Sep 17 00:00:00 2001
From: Danny Lin <danny@kdrag0n.dev>
Date: Thu, 22 Jul 2021 16:12:55 -0700
Subject: [PATCH] gmscompat: linker: Add support for opening zip files by fd
 paths

In some cases, it can be useful to load libraries from zip files that
are only available by fd reference. For example, file descriptors of
APKs containing native libraries may be sent via Binder IPC for clients
to use.

Unfortunately, while this linker does support loading libraries from
file descriptors using android_dlopen_ext, using that API is not an
option because our dlopen calls originate from JNI loadLibrary requests
in ART.

This is necessary for compatibility with Google Play Services' dynamic
module system (Dynamite) without weakening the SELinux sandbox to allow
other apps to open module APKs from
/data/user_de/0/com.google.android.gms/app_chimera/m.

Squashed with 7b3fc50d822aaffadb6429a87bfd358ecb7ae58e

Change-Id: If44d5c3faf4f50e4704688b520b197ff151ae05a
---
 linker/linker.cpp | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/linker/linker.cpp b/linker/linker.cpp
index a3c3f3d55..2bc635b15 100644
--- a/linker/linker.cpp
+++ b/linker/linker.cpp
@@ -938,14 +938,14 @@ class ZipArchiveCache {
   ZipArchiveCache() {}
   ~ZipArchiveCache();
 
-  bool get_or_open(const char* zip_path, ZipArchiveHandle* handle);
+  bool get_or_open(const char* zip_path, int zip_fd, ZipArchiveHandle* handle);
  private:
   DISALLOW_COPY_AND_ASSIGN(ZipArchiveCache);
 
   std::unordered_map<std::string, ZipArchiveHandle> cache_;
 };
 
-bool ZipArchiveCache::get_or_open(const char* zip_path, ZipArchiveHandle* handle) {
+bool ZipArchiveCache::get_or_open(const char* zip_path, int zip_fd, ZipArchiveHandle* handle) {
   std::string key(zip_path);
 
   auto it = cache_.find(key);
@@ -954,7 +954,7 @@ bool ZipArchiveCache::get_or_open(const char* zip_path, ZipArchiveHandle* handle
     return true;
   }
 
-  int fd = TEMP_FAILURE_RETRY(open(zip_path, O_RDONLY | O_CLOEXEC));
+  int fd = zip_fd != -1 ? dup(zip_fd) : TEMP_FAILURE_RETRY(open(zip_path, O_RDONLY | O_CLOEXEC));
   if (fd == -1) {
     return false;
   }
@@ -1005,13 +1005,19 @@ static int open_library_in_zipfile(ZipArchiveCache* zip_archive_cache,
 
   const char* zip_path = buf;
   const char* file_path = &buf[separator - path + 2];
-  int fd = TEMP_FAILURE_RETRY(open(zip_path, O_RDONLY | O_CLOEXEC));
+  int fd;
+  if (!strncmp("/gmscompat_fd_", zip_path, strlen("/gmscompat_fd_")) &&
+        sscanf(zip_path, "/gmscompat_fd_%d", &fd) == 1) {
+    fd = dup(fd);
+  } else {
+    fd = TEMP_FAILURE_RETRY(open(zip_path, O_RDONLY | O_CLOEXEC));
+  }
   if (fd == -1) {
     return -1;
   }
 
   ZipArchiveHandle handle;
-  if (!zip_archive_cache->get_or_open(zip_path, &handle)) {
+  if (!zip_archive_cache->get_or_open(zip_path, fd, &handle)) {
     // invalid zip-file (?)
     close(fd);
     return -1;
-- 
2.34.1

