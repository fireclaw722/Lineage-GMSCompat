From f941a5e9ecc20c88007d6498faf8fb3adcd21f2a Mon Sep 17 00:00:00 2001
From: June <june@eridan.me>
Date: Sat, 19 Mar 2022 17:10:28 +0200
Subject: [PATCH 05/44] Support forwarding notifications from other users

Commit history:

Before Android 13:
https://github.com/GrapheneOS/platform_frameworks_base/commits/30ab1eae4cd03270f0dce82a67a0122df7fb7c29

13: a40e627709a7

Signed-off-by: June <june@eridan.me>
Co-authored-by: inthewaves <inthewaves@pm.me>
Co-authored-by: June <june@eridan.me>
Co-authored-by: quh4gko8 <88831734+quh4gko8@users.noreply.github.com>
Co-authored-by: Pratyush <codelab@pratyush.dev>
---
 core/java/android/provider/Settings.java      |  11 +
 .../SystemNotificationChannels.java           |   8 +
 core/res/AndroidManifest.xml                  |   1 +
 core/res/res/values/strings.xml               |   6 +
 core/res/res/values/symbols.xml               |   6 +
 .../NotificationManagerService.java           | 412 +++++++++++++++++-
 .../server/notification/ZenModeHelper.java    | 127 ++++++
 7 files changed, 567 insertions(+), 4 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 64e39f5001f0..d9f9c91f059f 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -10433,6 +10433,17 @@ public final class Settings {
         public static final String LOCK_SCREEN_SHOW_ONLY_UNSEEN_NOTIFICATIONS =
                 "lock_screen_show_only_unseen_notifications";
 
+        /**
+         * Indicates whether the notifications for one user should be sent to the
+         * current user in censored form (app name, name of the user, time received are shown).
+         * <p>
+         * Type: int (0 for false, 1 for true)
+         *
+         * @hide
+         */
+        public static final String SEND_CENSORED_NOTIFICATIONS_TO_CURRENT_USER =
+                "send_censored_notifications_to_current_user";
+
         /**
          * Indicates whether snooze options should be shown on notifications
          * <p>
diff --git a/core/java/com/android/internal/notification/SystemNotificationChannels.java b/core/java/com/android/internal/notification/SystemNotificationChannels.java
index fef5e83cecca..6fab0091b971 100644
--- a/core/java/com/android/internal/notification/SystemNotificationChannels.java
+++ b/core/java/com/android/internal/notification/SystemNotificationChannels.java
@@ -66,6 +66,7 @@ public class SystemNotificationChannels {
     @Deprecated public static String SYSTEM_CHANGES_DEPRECATED = "SYSTEM_CHANGES";
     public static String SYSTEM_CHANGES = "SYSTEM_CHANGES_ALERTS";
     public static String DO_NOT_DISTURB = "DO_NOT_DISTURB";
+    public static String OTHER_USERS = "OTHER_USERS";
     public static String ACCESSIBILITY_MAGNIFICATION = "ACCESSIBILITY_MAGNIFICATION";
     public static String ACCESSIBILITY_SECURITY_POLICY = "ACCESSIBILITY_SECURITY_POLICY";
     public static String ABUSIVE_BACKGROUND_APPS = "ABUSIVE_BACKGROUND_APPS";
@@ -198,6 +199,13 @@ public class SystemNotificationChannels {
                 NotificationManager.IMPORTANCE_LOW);
         channelsList.add(dndChanges);
 
+        NotificationChannel otherUsers = new NotificationChannel(OTHER_USERS,
+                context.getString(R.string.notification_channel_other_users),
+                NotificationManager.IMPORTANCE_DEFAULT);
+        otherUsers.setDescription(context.getString(R.string.notification_channel_other_users_description));
+        otherUsers.setBlockable(true);
+        channelsList.add(otherUsers);
+
         final NotificationChannel newFeaturePrompt = new NotificationChannel(
                 ACCESSIBILITY_MAGNIFICATION,
                 context.getString(R.string.notification_channel_accessibility_magnification),
diff --git a/core/res/AndroidManifest.xml b/core/res/AndroidManifest.xml
index 22591641cc66..a26ad7e161cf 100644
--- a/core/res/AndroidManifest.xml
+++ b/core/res/AndroidManifest.xml
@@ -580,6 +580,7 @@
 
     <protected-broadcast android:name="NotificationManagerService.TIMEOUT" />
     <protected-broadcast android:name="NotificationHistoryDatabase.CLEANUP" />
+    <protected-broadcast android:name="NotificationManagerService.SWITCH_USER" />
     <protected-broadcast android:name="ScheduleConditionProvider.EVALUATE" />
     <protected-broadcast android:name="EventConditionProvider.EVALUATE" />
     <protected-broadcast android:name="SnoozeHelper.EVALUATE" />
diff --git a/core/res/res/values/strings.xml b/core/res/res/values/strings.xml
index 4596ca74bf8f..1a3c685058f2 100644
--- a/core/res/res/values/strings.xml
+++ b/core/res/res/values/strings.xml
@@ -6363,4 +6363,10 @@ ul.</string>
     <!-- Communal profile label on a screen. This can be used as a tab label for this profile in tabbed views and can be used to represent the profile in sharing surfaces, etc. [CHAR LIMIT=20] -->
     <string name="profile_label_communal">Communal</string>
 
+
+    <!-- Text shown for notifications from other users. -->
+    <string name="notification_channel_other_users">Other users</string>
+    <string name="notification_channel_other_users_description">Censored notifications from the lock screens of other users</string>
+    <string name="other_users_notification_title">Notification from <xliff:g id="app_name" example="Messages">%1$s</xliff:g> for <xliff:g id="username" example="Alice">%2$s</xliff:g></string>
+    <string name="other_users_notification_switch_user_action">Switch to <xliff:g id="username" example="Bob">%1$s</xliff:g></string>
 </resources>
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index fd6158d02b8f..2fa33ddbd885 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -5129,6 +5129,12 @@
   <java-symbol type="id" name="language_picker_item" />
   <java-symbol type="id" name="language_picker_header" />
 
+  <!-- Text shown for notifications from other users. -->
+  <java-symbol type="string" name="notification_channel_other_users" />
+  <java-symbol type="string" name="notification_channel_other_users_description" />
+  <java-symbol type="string" name="other_users_notification_title" />
+  <java-symbol type="string" name="other_users_notification_switch_user_action" />
+
   <java-symbol type="dimen" name="status_bar_height_default" />
 
   <java-symbol type="string" name="default_card_name"/>
diff --git a/services/core/java/com/android/server/notification/NotificationManagerService.java b/services/core/java/com/android/server/notification/NotificationManagerService.java
index fff8f3d2539a..6e1125adb0c1 100755
--- a/services/core/java/com/android/server/notification/NotificationManagerService.java
+++ b/services/core/java/com/android/server/notification/NotificationManagerService.java
@@ -491,6 +491,10 @@ public class NotificationManagerService extends SystemService {
     private static final String SCHEME_TIMEOUT = "timeout";
     private static final String EXTRA_KEY = "key";
 
+    private static final String ACTION_SWITCH_USER =
+            NotificationManagerService.class.getSimpleName() + ".SWITCH_USER";
+    private static final String EXTRA_SWITCH_USER_USERID = "userid";
+
     private static final int NOTIFICATION_INSTANCE_ID_MAX = (1 << 13);
 
     // States for the review permissions notification
@@ -2032,6 +2036,12 @@ public class NotificationManagerService extends SystemService {
                 mHistoryManager.onUserRemoved(userId);
                 mPreferencesHelper.syncChannelsBypassingDnd();
                 handleSavePolicyFile();
+
+                // Clear censored notifications in case the removed user forwarded any.
+                final int currentUserId = ActivityManager.getCurrentUser();
+                cancelAllNotificationsInt(MY_UID, MY_PID, getContext().getPackageName(),
+                        SystemNotificationChannels.OTHER_USERS, 0, 0, currentUserId,
+                        REASON_USER_STOPPED);
             } else if (action.equals(Intent.ACTION_USER_UNLOCKED)) {
                 final int userId = intent.getIntExtra(Intent.EXTRA_USER_HANDLE, USER_NULL);
                 mUserProfiles.updateCache(context);
@@ -2041,16 +2051,46 @@ public class NotificationManagerService extends SystemService {
                     mListeners.onUserUnlocked(userId);
                     mZenModeHelper.onUserUnlocked(userId);
                 }
+            } else if (action.equals(Intent.ACTION_USER_BACKGROUND)) {
+                // This is the user/profile that is going into the background.
+                final int userId = intent.getIntExtra(Intent.EXTRA_USER_HANDLE, -1);
+                if (userId >= 0) {
+                    // Clear censored notifications on switch.
+                    cancelAllNotificationsInt(MY_UID, MY_PID, getContext().getPackageName(),
+                            SystemNotificationChannels.OTHER_USERS, 0, 0, userId,
+                            REASON_APP_CANCEL_ALL);
+                }
             }
         }
+    };
+
+    private final BroadcastReceiver mSwitchUserReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (!ACTION_SWITCH_USER.equals(intent.getAction())) {
+                return;
+            }
 
-        private boolean isProfileUnavailable(String action) {
-            return allowPrivateProfile() ?
-                    action.equals(Intent.ACTION_PROFILE_UNAVAILABLE) :
-                    action.equals(Intent.ACTION_MANAGED_PROFILE_UNAVAILABLE);
+            final boolean canSwitch = mUm.isUserSwitcherEnabled()
+                    && mUm.getUserSwitchability() == UserManager.SWITCHABILITY_STATUS_OK;
+
+            final int userIdToSwitchTo = intent.getIntExtra(EXTRA_SWITCH_USER_USERID, -1);
+            if (userIdToSwitchTo >= 0 && canSwitch) {
+                try {
+                    ActivityManager.getService().switchUser(userIdToSwitchTo);
+                } catch (RemoteException re) {
+                    // Do nothing
+                }
+            }
         }
     };
 
+    private boolean isProfileUnavailable(String action) {
+        return allowPrivateProfile() ?
+                action.equals(Intent.ACTION_PROFILE_UNAVAILABLE) :
+                action.equals(Intent.ACTION_MANAGED_PROFILE_UNAVAILABLE);
+    }
+
     private final class SettingsObserver extends ContentObserver {
         private final Uri NOTIFICATION_BADGING_URI
                 = Settings.Secure.getUriFor(Settings.Secure.NOTIFICATION_BADGING);
@@ -2633,6 +2673,7 @@ public class NotificationManagerService extends SystemService {
         filter.addAction(Intent.ACTION_USER_ADDED);
         filter.addAction(Intent.ACTION_USER_REMOVED);
         filter.addAction(Intent.ACTION_USER_UNLOCKED);
+        filter.addAction(Intent.ACTION_USER_BACKGROUND);
         filter.addAction(Intent.ACTION_MANAGED_PROFILE_UNAVAILABLE);
         if (allowPrivateProfile()){
             filter.addAction(Intent.ACTION_PROFILE_UNAVAILABLE);
@@ -2684,6 +2725,9 @@ public class NotificationManagerService extends SystemService {
                                 () -> handleNotificationPermissionChange(packageName, userId));
                     }
                 });
+
+        IntentFilter switchUserFilter = new IntentFilter(ACTION_SWITCH_USER);
+        getContext().registerReceiver(mSwitchUserReceiver, switchUserFilter);
     }
 
     /**
@@ -8509,6 +8553,18 @@ public class NotificationManagerService extends SystemService {
                                 });
                             }
                         }
+
+                        // Now that the notification is posted, we can now consider sending a
+                        // censored copy of it to the foreground user (if the foreground user
+                        // differs from the intended recipient).
+                        final CensoredSendState state = getCensoredSendStateForNotification(r);
+                        if (state != CensoredSendState.DONT_SEND) {
+                            // Give the information directly so that we can release
+                            // mNotificationLock.
+                            mHandler.post(new EnqueueCensoredNotificationRunnable(
+                                    r.getSbn().getPackageName(), r.getUser().getIdentifier(),
+                                    r.getSbn().getId(), r.getSbn().getTag(), state));
+                        }
                     } else {
                         Slog.e(TAG, "Not posting notification without small icon: " + notification);
                         if (old != null && !old.isCanceled) {
@@ -8567,6 +8623,354 @@ public class NotificationManagerService extends SystemService {
         return group.getSbn().getInstanceId();
     }
 
+    enum CensoredSendState {
+        DONT_SEND, SEND_NORMAL, SEND_QUIET
+    }
+
+    @GuardedBy("mNotificationLock")
+    @NonNull
+    private CensoredSendState getCensoredSendStateForNotification(NotificationRecord record) {
+        final int userId = record.getUser().getIdentifier();
+        // This should cover not sending if it's meant for the current user or a work profile,
+        // since mUserProfiles updates its cache using UserManager#getProfiles which "Returns list
+        // of the profiles of userId including userId itself."
+        if (userId == UserHandle.USER_ALL || mUserProfiles.isCurrentProfile(userId)) {
+            if (DBG) Slog.d(TAG, "not sending censored notif: current user or a profile");
+            return CensoredSendState.DONT_SEND;
+        }
+
+        if (userId == ActivityManager.getCurrentUser()) {
+            if (DBG) Slog.d(TAG, "not sending censored notif: notification is coming from (upcoming) foreground user");
+            return CensoredSendState.DONT_SEND;
+        }
+
+        // Sending user has to opt in under Multiple users in Settings.
+        final boolean userEnabledCensoredSending = Settings.Secure.getIntForUser(
+                getContext().getContentResolver(),
+                Settings.Secure.SEND_CENSORED_NOTIFICATIONS_TO_CURRENT_USER, 0, userId) != 0;
+        if (!userEnabledCensoredSending) {
+            if (DBG) Slog.d(TAG, "not sending censored notif due to sender setting off");
+            return CensoredSendState.DONT_SEND;
+        }
+
+        // Work profiles already can show their notification to their owner. Also, since these
+        // notifications have switch user actions, do not show them if the switcher is disabled.
+        if (!mUm.isUserSwitcherEnabled()) {
+            if (DBG) Slog.d(TAG, "not sending censored notif since switcher isn't enabled");
+            return CensoredSendState.DONT_SEND;
+        }
+
+        if (record.isHidden()) {
+            if (DBG) Slog.d(TAG, "not sending censored notif due to hidden");
+            return CensoredSendState.DONT_SEND;
+        }
+
+        // Handles cases where the notification being sent is a censored notification itself.
+        if (SystemNotificationChannels.OTHER_USERS.equals(record.getChannel().getId())) {
+            if (DBG) Slog.d(TAG, "not sending censored notif due to original being " +
+                    "censored notification itself");
+            return CensoredSendState.DONT_SEND;
+        }
+
+        // Handles reoccurring update notifications (fixes issues like status update spamming).
+        if (record.isUpdate && (record.getNotification().flags & FLAG_ONLY_ALERT_ONCE) != 0) {
+            if (DBG) Slog.d(TAG, "not sending censored notif due to original being " +
+                    "an update that only alerts once");
+            return CensoredSendState.DONT_SEND;
+        }
+
+        // Muted by listener
+        final String disableEffects = disableNotificationEffects(record);
+        if (disableEffects != null) {
+            if (DBG) Slog.d(TAG, "not sending censored notif due to disableEffects");
+            return CensoredSendState.DONT_SEND;
+        }
+
+        // Suppressed because another notification in its group handles alerting
+        if (record.getSbn().isGroup()) {
+            if (record.getNotification().suppressAlertingDueToGrouping()) {
+                if (DBG) Slog.d(TAG, "not sending censored notif due another" +
+                        "notification in its group handles alerting");
+                return CensoredSendState.DONT_SEND;
+            }
+        }
+
+        // Check lock screen display settings.
+        if (!shouldShowNotificationOnKeyguardForUser(userId, record)) {
+            if (DBG) Slog.d(TAG, "not sending censored notif due lock screen settings");
+            return CensoredSendState.DONT_SEND;
+        }
+
+        // Check do not disturb lock screen state.
+        // We can't use record.isIntercepted(). That setting is based on the foreground user.
+        if (DBG) Slog.d(TAG, "processing DND state");
+        final CensoredSendState dndState =
+                mZenModeHelper.getCensoredSendStateFromUserDndOnVisuals(record, userId);
+        switch (dndState) {
+            case SEND_QUIET:
+                if (DBG) Slog.d(TAG, "dndState is SEND_QUIET");
+                return CensoredSendState.SEND_QUIET;
+            case SEND_NORMAL:
+                if (DBG) Slog.d(TAG, "dndState is SEND_NORMAL");
+                if (record.getChannel().getImportance() == IMPORTANCE_LOW
+                        || !record.isInterruptive()) {
+                    if (DBG) Slog.d(TAG, "using SEND_QUIET");
+                    return CensoredSendState.SEND_QUIET;
+                }
+                return CensoredSendState.SEND_NORMAL;
+            case DONT_SEND: // fall through
+            default:
+                if (DBG) Slog.d(TAG, "using DONT_SEND due to dndstate");
+                return CensoredSendState.DONT_SEND;
+        }
+    }
+
+    /**
+     * Determines if the notification should show up on the lock screen for the user.
+     * For use in determining if a notification should be forwarded to the foreground user in
+     * censored form.
+     *
+     * For similar logic, see
+     * {@link com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl#shouldHideNotifications(int)}
+     * {@link com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl#shouldShowOnKeyguard(NotificationEntry)}
+     * These methods aren't static methods and they rely on a lot of their internal functions,
+     * so we have to extract the logic into here.
+     */
+    @GuardedBy("mNotificationLock")
+    private boolean shouldShowNotificationOnKeyguardForUser(int userId, NotificationRecord record) {
+        final NotificationChannel channel = record.getChannel();
+        // Guard against notifications channels hiding from lock screen, silent notifications
+        // that are minimized (ambient notifications), and no-importance notifications.
+        if (channel.getLockscreenVisibility() == Notification.VISIBILITY_SECRET
+                || channel.getImportance() == IMPORTANCE_MIN
+                || channel.getImportance() == IMPORTANCE_NONE) {
+            if (DBG) {
+                Slog.d(TAG, "shouldShowNotificationOnKeyguardForUser: " +
+                        "channel.getLockscreenVisibility() == Notification.VISIBILITY_SECRET: " +
+                        (channel.getLockscreenVisibility() == Notification.VISIBILITY_SECRET));
+                Slog.d(TAG, " channel.getImportance() == IMPORTANCE_MIN: " +
+                        (channel.getImportance() == IMPORTANCE_MIN));
+                Slog.d(TAG, " channel.getImportance() == IMPORTANCE_NONE: " +
+                        (channel.getImportance() == IMPORTANCE_NONE));
+            }
+            return false;
+        }
+
+        final boolean showByUser = Settings.Secure.getIntForUser(getContext().getContentResolver(),
+                Settings.Secure.LOCK_SCREEN_SHOW_NOTIFICATIONS, 0, userId) != 0;
+        if (!showByUser) {
+            if (DBG) Slog.d(TAG, "shouldShowNotificationOnKeyguardForUser: " +
+                    "LOCK_SCREEN_SHOW_NOTIFICATIONS is false");
+            return false;
+        }
+
+        // Handles lockdown button.
+        final int strongAuthFlags = new LockPatternUtils(getContext()).getStrongAuthForUser(userId);
+        if ((strongAuthFlags & LockPatternUtils.StrongAuthTracker.STRONG_AUTH_REQUIRED_AFTER_USER_LOCKDOWN) != 0) {
+            if (DBG) Slog.d(TAG, "shouldShowNotificationOnKeyguardForUser: user in lockdown");
+            return false;
+        }
+
+        if (channel.getImportance() == IMPORTANCE_LOW) {
+            final boolean isLockScreenShowingSilent =
+                    Settings.Secure.getIntForUser(getContext().getContentResolver(),
+                    Settings.Secure.LOCK_SCREEN_SHOW_SILENT_NOTIFICATIONS, 1, userId) != 0;
+            if (DBG) Slog.d(TAG, "shouldShowNotificationOnKeyguardForUser: IMPORTANCE_LOW:" +
+                    "are silent notifications shown? " + isLockScreenShowingSilent);
+            return isLockScreenShowingSilent;
+        }
+
+        return true;
+    }
+
+    /**
+     * <p>Constructs a censored notification that will be enqueued to be forwarded to the foreground
+     * user. This Runnable should be posted to a Handler after
+     * {@link #getCensoredSendStateForNotification} has been run, as this does not enforce any
+     * checks.</p>
+     *
+     * <ul>
+     *     <li>The system sends the notification.</li>
+     *     <li>Only the app's name, the intended user, and time of notification are shown.</li>
+     *     <li>Every user has to opt in to having their notifications forwarded when they are active
+     *     in the background.</li>
+     *     <li>A censored notification comes with an action to switch to the intended user.</li>
+     *     <li>The censored notifications are grouped by user.</li>
+     *     <li>The censored notifications respect the lock screen visibility and the do not disturb
+     *     settings of the original recipient user, but the Runnable does not enforce it.</li>
+     *     <li>The censored notifications will be quiet for the current user if the original
+     *     notification is quiet. This includes silent channels and do not disturb muting.</li>
+     *     <li>The censored notifications are automatically cancelled whenever a user switch occurs
+     *     (i.e. when a broadcast with Intent.ACTION_USER_BACKGROUND is sent) and whenever users
+     *     are removed.</li>
+     * </ul>
+     */
+    private class EnqueueCensoredNotificationRunnable implements Runnable {
+        private final String pkg;
+        private final int originalUserId;
+        private final int notificationId;
+        private final CensoredSendState censoredSendState;
+        private final String originalTag;
+
+        // these are derived from the original information
+        private final String notificationGroupKey;
+        private final int notificationSummaryId;
+
+        /**
+         *
+         * @param pkg Package of the app that sent the notification, used to get the name of the app
+         * @param originalUserId The original recipient of the to-be-censored notification.
+         * @param notificationId The original notification id of the to-be-censored notification.
+         * @param tag The original tag of the to-be-censored notification.
+         * @param state The CensoredSendState as computed by
+         * {@link #getCensoredSendStateForNotification}.
+         */
+        EnqueueCensoredNotificationRunnable(String pkg, int originalUserId, int notificationId,
+                                            String tag, @NonNull CensoredSendState state) {
+            this.pkg = pkg;
+            this.originalUserId = originalUserId;
+            this.censoredSendState = state;
+            originalTag = tag;
+
+            // Group the censored notifications by user that sent them.
+            notificationGroupKey = createCensoredNotificationGroupKey(originalUserId);
+            notificationSummaryId = createCensoredSummaryId(originalUserId);
+            this.notificationId = createCensoredNotificationId(notificationId,
+                    notificationSummaryId, originalUserId);
+        }
+
+        @Override
+        public void run() {
+            // Sanity check
+            if (censoredSendState == CensoredSendState.DONT_SEND) return;
+
+            final String username = mUm.getUserInfo(originalUserId).name;
+            // Follows the way the app name is obtained in
+            // com.android.systemui.statusbar.notification.collection.NotificationRowBinderImpl,
+            // in the bindRow method.
+            String appname = pkg;
+            if (pkg != null) {
+                try {
+                    final ApplicationInfo info = mPackageManagerClient.getApplicationInfoAsUser(
+                            pkg, PackageManager.MATCH_UNINSTALLED_PACKAGES
+                                    | PackageManager.MATCH_DISABLED_COMPONENTS,
+                            originalUserId);
+                    if (info != null) {
+                        appname = String.valueOf(mPackageManagerClient.getApplicationLabel(info));
+                    }
+                } catch (PackageManager.NameNotFoundException e) {
+                    // Shouldn't be here; the original recipient should have the package!
+                    // We will fallback to the package name.
+                }
+            }
+
+            final String title = getContext().getString(
+                    R.string.other_users_notification_title, appname, username);
+            final String subtext = getContext().getString(
+                    R.string.notification_channel_other_users);
+            final String actionButtonTitle = getContext().getString(
+                    R.string.other_users_notification_switch_user_action, username);
+            final int color = getContext().getColor(
+                    com.android.internal.R.color.system_notification_accent_color);
+
+            final Intent intent = new Intent(ACTION_SWITCH_USER)
+                    .putExtra(EXTRA_SWITCH_USER_USERID, originalUserId)
+                    .setPackage(getContext().getPackageName())
+                    .addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY
+                                | Intent.FLAG_RECEIVER_EXCLUDE_BACKGROUND);
+            final PendingIntent pendingIntentSwitchUser = PendingIntent.getBroadcast(getContext(),
+                    originalUserId, intent, PendingIntent.FLAG_UPDATE_CURRENT
+                            | PendingIntent.FLAG_IMMUTABLE);
+
+            // We use the group alert behavior and the fact that the summary will never make
+            // an audible alert to control whether censored notifications will make noise.
+            final Notification censoredNotification =
+                    new Notification.Builder(getContext(), SystemNotificationChannels.OTHER_USERS)
+                            .addAction(new Notification.Action.Builder(null /* icon */,
+                                    actionButtonTitle, pendingIntentSwitchUser).build())
+                            .setAutoCancel(false)
+                            .setOngoing(false)
+                            .setColor(color)
+                            .setSmallIcon(R.drawable.ic_account_circle)
+                            .setContentTitle(title)
+                            .setSubText(subtext)
+                            .setVisibility(Notification.VISIBILITY_PRIVATE)
+                            .setGroup(notificationGroupKey)
+                            .setGroupAlertBehavior(censoredSendState == CensoredSendState.SEND_QUIET
+                                    ? Notification.GROUP_ALERT_SUMMARY
+                                    : Notification.GROUP_ALERT_CHILDREN)
+                            .setGroupSummary(false)
+                            .setWhen(System.currentTimeMillis())
+                            .setShowWhen(true)
+                            .build();
+
+            if (DBG) {
+                Slog.d(TAG, "Generated censored notification with id " + notificationId
+                        + ", from user " + originalUserId
+                        + ", for package " + pkg
+                        + ", tag " + createCensoredNotificationTag(originalUserId, pkg, originalTag)
+                        + ", sending to " + ActivityManager.getCurrentUser());
+            }
+
+            final int currentUserId = ActivityManager.getCurrentUser();
+            enqueueNotificationInternal(getContext().getPackageName(), getContext().getPackageName(),
+                    MY_UID, MY_PID, createCensoredNotificationTag(originalUserId, pkg, originalTag),
+                    notificationId, censoredNotification, currentUserId, false);
+
+            // Group the censored notifications per user.
+            final Notification censoredNotificationSummary =
+                    new Notification.Builder(getContext(), SystemNotificationChannels.OTHER_USERS)
+                            .setSmallIcon(R.drawable.ic_account_circle)
+                            .setColor(color)
+                            .setVisibility(Notification.VISIBILITY_PRIVATE)
+                            .setSubText(subtext)
+                            .setGroup(notificationGroupKey)
+                            .setGroupAlertBehavior(Notification.GROUP_ALERT_CHILDREN)
+                            .setGroupSummary(true)
+                            .setWhen(System.currentTimeMillis())
+                            .setShowWhen(true)
+                            .build();
+
+            enqueueNotificationInternal(getContext().getPackageName(), getContext().getPackageName(),
+                    MY_UID, MY_PID, createCensoredSummaryTag(originalUserId), notificationSummaryId,
+                    censoredNotificationSummary, currentUserId, false);
+        }
+
+        /**
+         * @return a tag for the censored notification derived from the parameters. Note: the
+         * summary notification does not use this tag; see {@link #createCensoredSummaryTag(int)}.
+         * This helps uniquely identify this notification to prevent notification id collisions.
+         */
+        private String createCensoredNotificationTag(int originalUserId, String pkg,
+                                                     @Nullable String originalTag) {
+            return "other_users_"
+                    + originalUserId + "_"
+                    + pkg
+                    + (originalTag != null ? "_" + originalTag : "");
+        }
+
+        private String createCensoredSummaryTag(int originalUserId) {
+            return "other_users_" + originalUserId;
+        }
+
+        private int createCensoredNotificationId(int originalNotificationId, int censoredSummaryId,
+                                                 int originalUserId) {
+            // Reserve the top integers for summary notification ids
+            return (originalNotificationId < Integer.MAX_VALUE - 50)
+                    ? originalNotificationId : (censoredSummaryId >> 4) - originalUserId;
+        }
+
+        private int createCensoredSummaryId(int originalUserId) {
+            // In the case where userId == 0, save room for auto group summary id,
+            // which is Integer.MAX_VALUE
+            return Integer.MAX_VALUE - 1 - originalUserId;
+        }
+
+        private String createCensoredNotificationGroupKey(int originalUserId) {
+            return "OTHER_USERS_" + originalUserId;
+        }
+    }
+
     /**
      * If the notification differs enough visually, consider it a new interruptive notification.
      */
diff --git a/services/core/java/com/android/server/notification/ZenModeHelper.java b/services/core/java/com/android/server/notification/ZenModeHelper.java
index 3f8b5952a1bc..feddbd4a273c 100644
--- a/services/core/java/com/android/server/notification/ZenModeHelper.java
+++ b/services/core/java/com/android/server/notification/ZenModeHelper.java
@@ -32,6 +32,7 @@ import static android.service.notification.ZenModeConfig.UPDATE_ORIGIN_SYSTEM_OR
 import static android.service.notification.ZenModeConfig.UPDATE_ORIGIN_USER;
 
 import static com.android.internal.util.FrameworkStatsLog.DND_MODE_RULE;
+import static com.android.server.notification.NotificationManagerService.CensoredSendState;
 
 import android.annotation.DrawableRes;
 import android.annotation.NonNull;
@@ -250,6 +251,115 @@ public class ZenModeHelper {
         }
     }
 
+    /**
+     * <p>Determines the censored notification sending state depending on an arbitrary user's
+     * ZenModeConfig. For use in determining if a notification should be forwarded to the foreground
+     * user in censored form.</p>
+     *
+     * <p>Suppose user A is a background user and user B is the foreground user, and that all other
+     * checks for sending censored notifications have passed.</p>
+     *
+     * <ul>
+     * <li>
+     *     If user A has DND off, then user B will get the censored notifications normally
+     *     ({@link CensoredSendState#SEND_NORMAL}). (This means that user B can get a notification
+     *     that makes noise.)
+     * </li>
+     * <li>
+     *     If user A has DND on and isn't hiding notifications from notification shade/lock screen,
+     *     then user B will get muted censored notifications ({@link CensoredSendState#SEND_QUIET}).
+     * </li>
+     * <li>
+     *     If user A has DND on and is hiding notifications, then user B will not get any censored
+     *     notifications {@link CensoredSendState#DONT_SEND}, unless user A manually set it so that
+     *     the notification bypasses DND
+     *
+     *     <ul><li>If it bypasses DND, then user B will get the notification normally
+     *     ({@link CensoredSendState#SEND_NORMAL}).</li></ul>
+     * </ul>
+     *
+     * <p>No mConfig lock is needed during parsing; we work on a copy of the ZenModeConfig.</p>
+     *
+     * <p>See {@link #computeZenMode()} for where the logic for computing zen mode was taken from.
+     * See {@link #updateConsolidatedPolicy(String)} for where the logic for creating a consolidated
+     * policy was taken from. Both methods are combined here to be able to generate a consolidated
+     * policy for an arbitrary ZenModeConfig. We can't use those methods directly, since they
+     * operate on only the foreground user.</p>
+     *
+     * @implNote <p>This doesn't respect automatic rules for background users that change their state
+     * (i.e. become active or inactive), because the calendar/timers to do so are only checked for
+     * the foreground user. (e.g., If a background user has DND on due to an automatic rule, and that
+     * DND rule turns off while the user is still backgrounded, then this method will still treat
+     * notifications as intercepted by DND.)</p>
+     *
+     * <p>We could try to do something like make
+     * {@link ZenModeConfig#parseAutomaticRuleEndTime(Context, Uri)} public and test that against
+     * System.currentTimeMillis.</p>, but that would make this more complicated.
+     *
+     * @param record The notification that is checked to see if it should be intercepted by DND.
+     * @param userId The identifier of the user to check the DND settings for.
+     * @return The censored sending state derived from the the notification and the user's do not
+     *         disturb settings.
+     */
+    CensoredSendState getCensoredSendStateFromUserDndOnVisuals(NotificationRecord record,
+                                                               int userId) {
+        final ZenModeConfig config = getConfigCopyForUser(userId);
+        if (config == null) {
+            return CensoredSendState.SEND_NORMAL;
+        }
+
+        // We create the consolidated policy for the user, and simultaneously compute the zen mode.
+        // The structure is derived from the other methods (see doc comment).
+        final ZenPolicy zenPolicy = new ZenPolicy();
+        int zenMode = Global.ZEN_MODE_OFF;
+        boolean isZenModeFromManualConfig = false;
+        if (config.manualRule != null) {
+            // Don't replace the zen mode anymore. This mirrors the line
+            // `if (mConfig.manualRule != null) return mConfig.manualRule.zenMode;`
+            // from computeZenMode.
+            isZenModeFromManualConfig = true;
+            zenMode = config.manualRule.zenMode;
+            if (zenMode == Global.ZEN_MODE_OFF) {
+                // zenMode won't be changed again anyway, so it won't be intercepted. Send normally
+                // to avoid constructing a consolidated policy.
+                return CensoredSendState.SEND_NORMAL;
+            }
+            applyCustomPolicy(zenPolicy, config.manualRule);
+        }
+
+        // This is apparently how automatic rules are parsed.
+        for (ZenRule automaticRule : config.automaticRules.values()) {
+            if (automaticRule.isAutomaticActive()) {
+                applyCustomPolicy(zenPolicy, automaticRule);
+                if (!isZenModeFromManualConfig
+                        && zenSeverity(automaticRule.zenMode) > zenSeverity(zenMode)) {
+                    zenMode = automaticRule.zenMode;
+                }
+            }
+        }
+
+        if (zenMode == Global.ZEN_MODE_OFF) {
+            // Send normally to avoid constructing a consolidated policy.
+            return CensoredSendState.SEND_NORMAL;
+        }
+
+        // Create the consolidated policy. (Maybe these can be cached?)
+        final NotificationManager.Policy policy = config.toNotificationPolicy(zenPolicy);
+
+        if (mFiltering.shouldIntercept(zenMode, policy, record)) {
+            // Here, notification does not bypass DND
+            if ((policy.suppressedVisualEffects &
+                    NotificationManager.Policy.SUPPRESSED_EFFECT_NOTIFICATION_LIST) != 0) {
+                // If user A has DND on and is hiding notifications from notification shade/loc,
+                // then user B will not get any censored notifications
+                return CensoredSendState.DONT_SEND;
+            }
+            // Otherwise user B will get muted censored notifications
+            return CensoredSendState.SEND_QUIET;
+        }
+        return CensoredSendState.SEND_NORMAL;
+    }
+
     public void addCallback(Callback callback) {
         mCallbacks.add(callback);
     }
@@ -1265,6 +1375,23 @@ public class ZenModeHelper {
         }
     }
 
+    /**
+     * For use in determining if a notification should be forwarded to the foreground user in
+     * censored form.
+     *
+     * ZenModeHelper works by only focusing on the *foreground* user's do not disturb settings.
+     * This is needed to expose a way to get the config and interception results for an arbitrary
+     * user without getting affected by any changes.
+     *
+     * @return a copy of the zen mode configuration for the given userId
+     */
+    private ZenModeConfig getConfigCopyForUser(int userId) {
+        synchronized (mConfig) {
+            final ZenModeConfig config = mConfigs.get(userId);
+            return config != null ? config.copy() : null;
+        }
+    }
+
     /**
      * @return a copy of the zen mode consolidated policy
      */
-- 
2.34.1

