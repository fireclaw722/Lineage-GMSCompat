From 66a09a591b4ce1765a778f9fb813de7497032e09 Mon Sep 17 00:00:00 2001
From: Dmitry Muhomor <muhomor.dmitry@gmail.com>
Date: Thu, 16 Nov 2023 17:42:39 +0200
Subject: [PATCH 21/45] support specifying per-app compatibility configs

These configs can be used to disable/enable hardening features by default for apps that are known
to be (in)compatible with them.
---
 .../android/ext/settings/ExtSettings.java     |  11 ++
 .../internal/pm/parsing/pkg/PackageImpl.java  |  27 +++
 core/res/res/values/config_ext.xml            |   3 +
 proto/Android.bp                              |   5 +-
 services/Android.bp                           |   1 +
 .../com/android/server/ext/AppCompatConf.java | 171 ++++++++++++++++++
 .../android/server/ext/SystemServerExt.java   |   2 +
 7 files changed, 219 insertions(+), 1 deletion(-)
 create mode 100644 services/core/java/com/android/server/ext/AppCompatConf.java

diff --git a/core/java/android/ext/settings/ExtSettings.java b/core/java/android/ext/settings/ExtSettings.java
index 676316f1147d..ff7d4e9304e6 100644
--- a/core/java/android/ext/settings/ExtSettings.java
+++ b/core/java/android/ext/settings/ExtSettings.java
@@ -22,6 +22,17 @@ public class ExtSettings {
     public static final BoolSysProperty EXEC_SPAWNING = new BoolSysProperty(
             "persist.security.exec_spawn", true);
 
+    // AppCompatConfig specifies which hardening features are compatible/incompatible with a
+    // specific app.
+    // This setting controls whether incompatible hardening features would be disabled by default
+    // for that app. In both cases, user will still be able to enable/disable them manually.
+    //
+    // Note that hardening features that are marked as compatible are enabled unconditionally by
+    // default, regardless of this setting.
+    public static final BoolSetting ALLOW_DISABLING_HARDENING_VIA_APP_COMPAT_CONFIG = new BoolSetting(
+            Setting.Scope.GLOBAL, "allow_automatic_pkg_hardening_config", // historical name
+            defaultBool(R.bool.setting_default_allow_disabling_hardening_via_app_compat_config));
+
     private ExtSettings() {}
 
     // used for making settings defined in this class unreadable by third-party apps
diff --git a/core/java/com/android/internal/pm/parsing/pkg/PackageImpl.java b/core/java/com/android/internal/pm/parsing/pkg/PackageImpl.java
index 3e5d2453aab7..c5e6dee6941f 100644
--- a/core/java/com/android/internal/pm/parsing/pkg/PackageImpl.java
+++ b/core/java/com/android/internal/pm/parsing/pkg/PackageImpl.java
@@ -3813,4 +3813,31 @@ public class PackageImpl implements ParsedPackage, AndroidPackageInternal,
     public com.android.server.pm.ext.PackageExt ext() {
         return ext;
     }
+
+    private long cachedCompatConfigVersionCode;
+    private com.android.server.os.nano.AppCompatProtos.CompatConfig cachedCompatConfig;
+
+    @Nullable
+    public com.android.server.os.nano.AppCompatProtos.CompatConfig getAppCompatConfig() {
+        var configs = com.android.server.ext.AppCompatConf.getParsedConfigs();
+
+        if (configs == null) {
+            return null;
+        }
+
+        synchronized (this) {
+            if (configs.versionCode == cachedCompatConfigVersionCode) {
+                return cachedCompatConfig;
+            }
+        }
+
+        var config = com.android.server.ext.AppCompatConf.get(configs, this);
+
+        synchronized (this) {
+            cachedCompatConfigVersionCode = configs.versionCode;
+            cachedCompatConfig = config;
+        }
+
+        return config;
+    }
 }
diff --git a/core/res/res/values/config_ext.xml b/core/res/res/values/config_ext.xml
index 5e0b997d6283..9fd40ab92d23 100644
--- a/core/res/res/values/config_ext.xml
+++ b/core/res/res/values/config_ext.xml
@@ -1,5 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
+    <bool name="setting_default_allow_disabling_hardening_via_app_compat_config">true</bool>
+    <java-symbol type="bool" name="setting_default_allow_disabling_hardening_via_app_compat_config" />
+
     <string name="config_first_party_app_source_package_name">app.grapheneos.apps</string>
     <java-symbol type="string" name="config_first_party_app_source_package_name" />
 </resources>
diff --git a/proto/Android.bp b/proto/Android.bp
index a5e13350ebd2..04d9084fdf5c 100644
--- a/proto/Android.bp
+++ b/proto/Android.bp
@@ -13,7 +13,10 @@ java_library_static {
     proto: {
         type: "nano",
     },
-    srcs: ["src/**/*.proto"],
+    srcs: [
+        "src/**/*.proto",
+        ":app_compat_config_proto-src",
+    ],
     sdk_version: "9",
     // Pin java_version until jarjar is certified to support later versions. http://b/72703434
     java_version: "1.8",
diff --git a/services/Android.bp b/services/Android.bp
index a1c558208921..9c887450cfe4 100644
--- a/services/Android.bp
+++ b/services/Android.bp
@@ -220,6 +220,7 @@ java_library {
 
     required: [
         "libukey2_jni_shared",
+        "AppCompatConfig",
     ],
 
     // Uncomment to enable output of certain warnings (deprecated, unchecked)
diff --git a/services/core/java/com/android/server/ext/AppCompatConf.java b/services/core/java/com/android/server/ext/AppCompatConf.java
new file mode 100644
index 000000000000..9f614c1b887b
--- /dev/null
+++ b/services/core/java/com/android/server/ext/AppCompatConf.java
@@ -0,0 +1,171 @@
+package com.android.server.ext;
+
+import android.annotation.Nullable;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManagerInternal;
+import android.content.pm.SigningDetails;
+import android.os.PatternMatcher;
+import android.util.ArrayMap;
+import android.util.Slog;
+
+import com.android.internal.os.BackgroundThread;
+import com.android.server.LocalServices;
+import com.android.server.os.nano.AppCompatProtos;
+import com.android.server.os.nano.AppCompatProtos.AppCompatConfig;
+import com.android.server.os.nano.AppCompatProtos.CompatConfig;
+import com.android.server.pm.parsing.pkg.PackageImpl;
+import com.android.server.pm.pkg.AndroidPackage;
+
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
+public class AppCompatConf {
+    private static final String TAG = AppCompatConf.class.getSimpleName();
+
+    private static final String CONFIG_HOLDER_PKG_NAME = "app.grapheneos.AppCompatConfig";
+
+    public static class Configs {
+        public final long versionCode;
+        public final ArrayMap<String, AppCompatConfig> map;
+
+        Configs(long versionCode, ArrayMap<String, AppCompatConfig> map) {
+            this.versionCode = versionCode;
+            this.map = map;
+        }
+    }
+
+    private static volatile Configs configs;
+
+    public static Configs getParsedConfigs() {
+        return configs;
+    }
+
+    @Nullable
+    private static AndroidPackage getConfigHolderPackage() {
+        var pm = LocalServices.getService(PackageManagerInternal.class);
+        AndroidPackage pkg = pm.getPackage(CONFIG_HOLDER_PKG_NAME);
+        if (pkg == null) {
+            Slog.w(TAG, "missing " + CONFIG_HOLDER_PKG_NAME);
+            return null;
+        }
+        return pkg;
+    }
+
+    static void init(Context ctx) {
+        AndroidPackage pkg = getConfigHolderPackage();
+        if (pkg == null) {
+            Slog.w(TAG, "missing " + CONFIG_HOLDER_PKG_NAME);
+            // don't register listener
+            return;
+        }
+
+        update(pkg);
+
+        var filter = new IntentFilter(Intent.ACTION_PACKAGE_REPLACED);
+        filter.addDataScheme("package");
+        filter.addDataPath(new PatternMatcher(CONFIG_HOLDER_PKG_NAME, PatternMatcher.PATTERN_LITERAL));
+        ctx.registerReceiver(new BroadcastReceiver() {
+            @Override
+            public void onReceive(Context context, Intent intent) {
+                Slog.d(TAG, "received " + intent);
+                AndroidPackage updatedPkg = getConfigHolderPackage();
+                if (updatedPkg == null) {
+                    Slog.e(TAG, "missing config package after update");
+                } else {
+                    update(updatedPkg);
+                }
+            }
+        }, filter, null, BackgroundThread.getHandler());
+    }
+
+    private static void update(AndroidPackage pkg) {
+        String apkPath = pkg.getSplits().get(0).getPath();
+        // thread-safe: "configs" field is volatile and map itself is immutable after parsing
+        configs = parseFromApk(pkg.getLongVersionCode(), apkPath);
+        Slog.d(TAG, "updated from " + apkPath);
+    }
+
+    @Nullable
+    public static CompatConfig get(Configs configs, PackageImpl pkg) {
+        ArrayMap<String, AppCompatConfig> map = configs.map;
+
+        String pkgName = pkg.getPackageName();
+
+        AppCompatConfig acc = map.get(pkgName);
+
+        if (acc == null) {
+            return null;
+        }
+
+        AppCompatProtos.PackageSpec pkgSpec = acc.packageSpec;
+
+        SigningDetails signingDetails = pkg.getSigningDetails();
+
+        if (signingDetails == SigningDetails.UNKNOWN) {
+            Slog.w(TAG, "SigningDetails.UNKNOWN for " + pkgName);
+            return null;
+        }
+
+        boolean validCert = false;
+
+        for (byte[] cert : pkgSpec.certsSha256) {
+            if (signingDetails.hasSha256Certificate(cert)) {
+                validCert = true;
+                break;
+            }
+        }
+
+        if (!validCert) {
+            Slog.d(TAG, "invalid cert for " + pkgName);
+            return null;
+        }
+
+        long version = pkg.getLongVersionCode();
+
+        for (CompatConfig c : acc.configs) {
+            long min = c.minVersion;
+            if (min != 0 && version < min) {
+                continue;
+            }
+            long max = c.maxVersion;
+            if (max != 0 && version > max) {
+                continue;
+            }
+            return c;
+        }
+
+        Slog.d(TAG, "unknown version " + version + " of " + pkgName);
+        return null;
+    }
+
+    @Nullable
+    private static Configs parseFromApk(long versionCode, String apkPath) {
+        try {
+            byte[] configBytes;
+
+            try (var f = new ZipFile(apkPath)) {
+                ZipEntry e = f.getEntry("app_compat_configs.pb");
+                try (var s = f.getInputStream(e)) {
+                    configBytes = s.readAllBytes();
+                }
+            }
+
+            var configsWrapper = AppCompatProtos.AppCompatConfigs.parseFrom(configBytes);
+
+            AppCompatConfig[] configs = configsWrapper.configs;
+
+            var map = new ArrayMap<String, AppCompatConfig>(configs.length);
+            for (var e : configs) {
+                map.put(e.packageSpec.pkgName, e);
+            }
+
+            return new Configs(versionCode, map);
+        } catch (Exception e) {
+            Slog.e(TAG, "", e);
+            return null;
+        }
+    }
+}
diff --git a/services/core/java/com/android/server/ext/SystemServerExt.java b/services/core/java/com/android/server/ext/SystemServerExt.java
index 6969e8773928..df1138df0e05 100644
--- a/services/core/java/com/android/server/ext/SystemServerExt.java
+++ b/services/core/java/com/android/server/ext/SystemServerExt.java
@@ -29,6 +29,8 @@ public final class SystemServerExt {
     public static void init(Context systemContext, PackageManagerService pm) {
         SystemServerExt sse = new SystemServerExt(systemContext, pm);
         sse.bgHandler.post(sse::initBgThread);
+
+        AppCompatConf.init(systemContext);
     }
 
     void initBgThread() {
-- 
2.34.1

