From f5c6f6c6fb2cf43e9d10ba5cb878be52d414cd1d Mon Sep 17 00:00:00 2001
From: Dmitry Muhomor <muhomor.dmitry@gmail.com>
Date: Mon, 18 Dec 2023 19:28:01 +0200
Subject: [PATCH 22/44] PackageHooks: infrastructure for per-package hooks in
 system_server

---
 .../server/ext/PackageManagerHooks.java       |  9 ++
 .../com/android/server/pm/ext/PackageExt.java |  7 ++
 .../android/server/pm/ext/PackageHooks.java   | 83 +++++++++++++++++++
 .../server/pm/ext/PackageHooksRegistry.java   |  6 ++
 .../PermissionManagerServiceImpl.java         | 51 ++++++++++++
 5 files changed, 156 insertions(+)
 create mode 100644 services/core/java/com/android/server/pm/ext/PackageHooks.java

diff --git a/services/core/java/com/android/server/ext/PackageManagerHooks.java b/services/core/java/com/android/server/ext/PackageManagerHooks.java
index 90dae69c37cc..66be517f3265 100644
--- a/services/core/java/com/android/server/ext/PackageManagerHooks.java
+++ b/services/core/java/com/android/server/ext/PackageManagerHooks.java
@@ -15,6 +15,7 @@ import android.util.ArraySet;
 
 import com.android.server.pm.GosPackageStatePmHooks;
 import com.android.server.pm.PackageManagerService;
+import com.android.server.pm.ext.PackageHooks;
 import com.android.server.pm.permission.Permission;
 import com.android.server.pm.pkg.AndroidPackage;
 import com.android.server.pm.pkg.PackageStateInternal;
@@ -96,6 +97,14 @@ public class PackageManagerHooks {
                 }
             }
         }
+
+        if (PackageHooks.shouldBlockAppsFilterVisibility(
+                callingPkgSetting, callingSharedPkgSettings, callingUserId,
+                targetPkgSetting, targetUserId)
+        ) {
+            return true;
+        }
+
         return false;
     }
 
diff --git a/services/core/java/com/android/server/pm/ext/PackageExt.java b/services/core/java/com/android/server/pm/ext/PackageExt.java
index 3a848d23f4bf..2a39170b5021 100644
--- a/services/core/java/com/android/server/pm/ext/PackageExt.java
+++ b/services/core/java/com/android/server/pm/ext/PackageExt.java
@@ -13,15 +13,22 @@ public class PackageExt {
     private final int packageId;
     private final int flags;
 
+    private final PackageHooks hooks;
+
     public PackageExt(int packageId, int flags) {
         this.packageId = packageId;
         this.flags = flags;
+        this.hooks = PackageHooksRegistry.getHooks(packageId);
     }
 
     public int getPackageId() {
         return packageId;
     }
 
+    public PackageHooks hooks() {
+        return hooks;
+    }
+
     public AppInfoExt toAppInfoExt(PackageImpl pkg) {
         AppCompatProtos.CompatConfig compatConfig = pkg.getAppCompatConfig();
 
diff --git a/services/core/java/com/android/server/pm/ext/PackageHooks.java b/services/core/java/com/android/server/pm/ext/PackageHooks.java
new file mode 100644
index 000000000000..58d58be697bb
--- /dev/null
+++ b/services/core/java/com/android/server/pm/ext/PackageHooks.java
@@ -0,0 +1,83 @@
+package com.android.server.pm.ext;
+
+import android.annotation.Nullable;
+import android.content.pm.PackageManager;
+import android.util.ArraySet;
+
+import com.android.server.pm.pkg.AndroidPackage;
+import com.android.server.pm.pkg.GosPackageStatePm;
+import com.android.server.pm.pkg.PackageState;
+import com.android.server.pm.pkg.PackageStateInternal;
+import com.android.server.pm.pkg.PackageUserStateInternal;
+
+public class PackageHooks {
+    static final PackageHooks DEFAULT = new PackageHooks();
+
+    public static boolean isDefault(PackageHooks hooks) {
+        return hooks == DEFAULT;
+    }
+
+    protected static final int NO_PERMISSION_OVERRIDE = -8;
+    public static final int PERMISSION_OVERRIDE_GRANT = PackageManager.PERMISSION_GRANTED;
+    public static final int PERMISSION_OVERRIDE_REVOKE = PackageManager.PERMISSION_DENIED;
+
+    public int overridePermissionState(String permission, int userId) {
+        return NO_PERMISSION_OVERRIDE;
+    }
+
+    public boolean shouldBlockPackageVisibility(int userId, PackageStateInternal otherPkg) {
+        return false;
+    }
+
+    public static boolean shouldBlockAppsFilterVisibility(
+            @Nullable PackageStateInternal callingPkgSetting,
+            ArraySet<PackageStateInternal> callingSharedPkgSettings,
+            int callingUserId,
+            PackageStateInternal targetPkgSetting, int targetUserId) {
+        if (callingPkgSetting != null) {
+            return shouldBlockPackageVisibilityTwoWay(
+                    callingPkgSetting, callingUserId,
+                    targetPkgSetting, targetUserId);
+        }
+
+        for (int i = callingSharedPkgSettings.size() - 1; i >= 0; --i) {
+            boolean res = shouldBlockPackageVisibilityTwoWay(
+                    callingSharedPkgSettings.valueAt(i), callingUserId,
+                    targetPkgSetting, targetUserId);
+            if (res) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    private static boolean shouldBlockPackageVisibilityTwoWay(
+            PackageStateInternal pkgSetting, int pkgUserId,
+            PackageStateInternal otherPkgSetting, int otherPkgUserId) {
+        boolean res = shouldBlockPackageVisibilityInner(pkgSetting, pkgUserId, otherPkgSetting);
+        if (!res) {
+            res = shouldBlockPackageVisibilityInner(otherPkgSetting, otherPkgUserId, pkgSetting);
+        }
+        return res;
+    }
+
+    private static boolean shouldBlockPackageVisibilityInner(
+            PackageStateInternal pkgSetting, int pkgUserId, PackageStateInternal otherPkgSetting) {
+        AndroidPackage pkg = pkgSetting.getPkg();
+        if (pkg != null) {
+            return pkg.ext().hooks().shouldBlockPackageVisibility(pkgUserId, otherPkgSetting);
+        }
+
+        return false;
+    }
+
+    protected static boolean isUserInstalledPkg(PackageState ps) {
+        return !ps.isSystem();
+    }
+
+    protected static long getGosPsPackageFlags(PackageUserStateInternal pkgUserState) {
+        GosPackageStatePm ps = pkgUserState.getGosPackageState();
+        return ps != null ? ps.packageFlags : 0L;
+    }
+}
diff --git a/services/core/java/com/android/server/pm/ext/PackageHooksRegistry.java b/services/core/java/com/android/server/pm/ext/PackageHooksRegistry.java
index b720e2edbca7..aca3bd31f42e 100644
--- a/services/core/java/com/android/server/pm/ext/PackageHooksRegistry.java
+++ b/services/core/java/com/android/server/pm/ext/PackageHooksRegistry.java
@@ -11,4 +11,10 @@ public class PackageHooksRegistry {
             default -> PackageParsingHooks.DEFAULT;
         };
     }
+
+    public static PackageHooks getHooks(int packageId) {
+        return switch (packageId) {
+            default -> PackageHooks.DEFAULT;
+        };
+    }
 }
diff --git a/services/core/java/com/android/server/pm/permission/PermissionManagerServiceImpl.java b/services/core/java/com/android/server/pm/permission/PermissionManagerServiceImpl.java
index a84c17f8cd22..571527c60078 100644
--- a/services/core/java/com/android/server/pm/permission/PermissionManagerServiceImpl.java
+++ b/services/core/java/com/android/server/pm/permission/PermissionManagerServiceImpl.java
@@ -142,11 +142,14 @@ import com.android.server.pm.PackageInstallerService;
 import com.android.server.pm.PackageManagerTracedLock;
 import com.android.server.pm.UserManagerInternal;
 import com.android.server.pm.UserManagerService;
+import com.android.server.pm.ext.PackageExt;
+import com.android.server.pm.ext.PackageHooks;
 import com.android.server.pm.parsing.PackageInfoUtils;
 import com.android.server.pm.parsing.pkg.AndroidPackageUtils;
 import com.android.server.pm.pkg.AndroidPackage;
 import com.android.server.pm.pkg.PackageState;
 import com.android.server.pm.pkg.PackageStateInternal;
+import com.android.server.pm.pkg.PackageUserStateInternal;
 import com.android.server.pm.pkg.SharedUserApi;
 import com.android.server.policy.PermissionPolicyInternal;
 import com.android.server.policy.SoftRestrictedPermissionPolicy;
@@ -1604,6 +1607,10 @@ public class PermissionManagerServiceImpl implements PermissionManagerServiceInt
                 return;
             }
 
+            if (PackageExt.get(pkg).hooks().overridePermissionState(permName, userId) == PackageHooks.PERMISSION_OVERRIDE_GRANT) {
+                throw new IllegalArgumentException(permName + " is granted by PackageHooks for " + packageName);
+            }
+
             final int flags = uidState.getPermissionFlags(permName);
             // Only the system may revoke SYSTEM_FIXED permissions.
             if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0
@@ -2598,8 +2605,12 @@ public class PermissionManagerServiceImpl implements PermissionManagerServiceInt
             }
         }
 
+        final PackageHooks pkgHooks = PackageExt.get(pkg).hooks();
+
         synchronized (mLock) {
             for (final int userId : userIds) {
+                PackageUserStateInternal pkgUserState = ps.getUserStateOrDefault(userId);
+
                 final UserPermissionState userState = mState.getOrCreateUserState(userId);
                 final UidPermissionState uidState = userState.getOrCreateUidState(ps.getAppId());
 
@@ -2900,6 +2911,46 @@ public class PermissionManagerServiceImpl implements PermissionManagerServiceInt
                         Slog.wtf(LOG_TAG, "Unknown permission protection " + bp.getProtection()
                                 + " for permission " + bp.getName());
                     }
+
+                    {
+                        final int override = pkgHooks.overridePermissionState(bp.getName(), userId);
+                        boolean uidStateChanged = false;
+                        int flags = -1;
+                        if (override == PackageHooks.PERMISSION_OVERRIDE_GRANT) {
+                            uidStateChanged |= uidState.grantPermission(bp);
+                            flags = FLAG_PERMISSION_SYSTEM_FIXED;
+                        } else if (override == PackageHooks.PERMISSION_OVERRIDE_REVOKE) {
+                            boolean revoke = true;
+                            PermissionState s = uidState.getPermissionState(bp.getName());
+                            if (s != null) {
+                                revoke = (s.getFlags() & FLAG_PERMISSION_USER_SET) == 0;
+                            }
+
+                            if (revoke) {
+                                uidStateChanged |= uidState.revokePermission(bp);
+                                flags = 0;
+                            }
+                        }
+
+                        if (flags != -1) {
+                            int mask = FLAG_PERMISSION_SYSTEM_FIXED
+                                    | FLAG_PERMISSION_USER_SET
+                                    | FLAG_PERMISSION_USER_FIXED
+                                    | FLAG_PERMISSION_POLICY_FIXED
+                                    | FLAG_PERMISSION_GRANTED_BY_DEFAULT
+                                    | FLAG_PERMISSION_GRANTED_BY_ROLE
+                                    | FLAG_PERMISSION_REVOKED_COMPAT
+                                    | FLAG_PERMISSION_ONE_TIME
+                                    | FLAG_PERMISSION_AUTO_REVOKED
+                            ;
+                            uidStateChanged |= uidState.updatePermissionFlags(bp, mask, flags);
+                        }
+
+                        if (uidStateChanged) {
+                            updatedUserIds = ArrayUtils.appendInt(updatedUserIds, userId);
+                        }
+                    }
+
                 }
 
                 if ((installPermissionsChangedForUser || replace)
-- 
2.34.1

